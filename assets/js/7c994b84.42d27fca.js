"use strict";(self.webpackChunkai_maniacs=self.webpackChunkai_maniacs||[]).push([[3665],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},9696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"model-context-protocol/mcp-start","title":"MCP Introduction","description":"This page introduces the Model Context Protocol (MCP): a lightweight, composable approach for packaging, transmitting, and applying contextual information to models so their behavior is predictable, auditable, and reusable across systems.","source":"@site/docs/model-context-protocol/mcp-start.md","sourceDirName":"model-context-protocol","slug":"/model-context-protocol/mcp-start","permalink":"/ai-maniacs/docs/model-context-protocol/mcp-start","draft":false,"unlisted":false,"editUrl":"https://github.com/sethdavis512/ai-maniacs/tree/main/docs/model-context-protocol/mcp-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Model Context Protocol","permalink":"/ai-maniacs/docs/category/model-context-protocol"}}');var i=t(4848),r=t(8453);const a={},o="MCP Introduction",l={},c=[{value:"What is MCP?",id:"what-is-mcp",level:3},{value:"Why use MCP?",id:"why-use-mcp",level:3},{value:"Common MCP Components",id:"common-mcp-components",level:3},{value:"How MCP is typically leveraged",id:"how-mcp-is-typically-leveraged",level:3},{value:"Integration patterns",id:"integration-patterns",level:3},{value:"Data shape (example)",id:"data-shape-example",level:3},{value:"Edge cases &amp; pitfalls",id:"edge-cases--pitfalls",level:3},{value:"Security &amp; governance",id:"security--governance",level:3},{value:"Example uses in AI systems",id:"example-uses-in-ai-systems",level:3},{value:"Quick implementation checklist",id:"quick-implementation-checklist",level:3},{value:"Further reading &amp; resources",id:"further-reading--resources",level:3},{value:"Exercises (for learners)",id:"exercises-for-learners",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mcp-introduction",children:"MCP Introduction"})}),"\n",(0,i.jsx)(n.p,{children:"This page introduces the Model Context Protocol (MCP): a lightweight, composable approach for packaging, transmitting, and applying contextual information to models so their behavior is predictable, auditable, and reusable across systems."}),"\n",(0,i.jsx)(n.h3,{id:"what-is-mcp",children:"What is MCP?"}),"\n",(0,i.jsx)(n.p,{children:"Model Context Protocol (MCP) is a set of conventions and data shapes for describing the context a model should use when producing outputs. Context here includes dynamic application state, user intent, relevant documents, tool descriptions, and policy constraints. MCP is intentionally implementation-agnostic \u2014 it's a contract (schema + behavior hints) that systems agree upon so the same context can be shared across services, adapters, and model runtimes."}),"\n",(0,i.jsx)(n.p,{children:"Key aspects:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Explicit context objects (metadata, documents, instructions, tools)"}),"\n",(0,i.jsx)(n.li,{children:"Versioned schemas so consumers can validate and interpret context reliably"}),"\n",(0,i.jsx)(n.li,{children:"Clear rules for precedence and merging when multiple contexts apply"}),"\n",(0,i.jsx)(n.li,{children:"Lightweight transport-friendly format (JSON / JSON-LD / proxied binary blobs)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"why-use-mcp",children:"Why use MCP?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Predictability: Models behave more consistently when given well-structured context."}),"\n",(0,i.jsx)(n.li,{children:"Reusability: Context packages can be shared between components (UI, orchestrators, agents) and reused across sessions."}),"\n",(0,i.jsx)(n.li,{children:"Auditability: Structured context makes it easier to log, trace, and review why a model produced a particular output."}),"\n",(0,i.jsx)(n.li,{children:"Interoperability: Different tools and model providers can cooperate if they speak the same context protocol."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-mcp-components",children:"Common MCP Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"identity: user, session, role, permissions"}),"\n",(0,i.jsx)(n.li,{children:"instructions: system-level directives, role prompts, safety overrides"}),"\n",(0,i.jsx)(n.li,{children:"documents: short summaries, long reference files, embeddings or pointers"}),"\n",(0,i.jsx)(n.li,{children:"tools: descriptions of available actions/endpoints and their I/O"}),"\n",(0,i.jsx)(n.li,{children:"preferences: user or application preferences that influence style/format"}),"\n",(0,i.jsx)(n.li,{children:"constraints: timeouts, cost limits, safety/policy rules"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Each component should be small, named, and typed so downstream systems can validate and apply them safely."}),"\n",(0,i.jsx)(n.h3,{id:"how-mcp-is-typically-leveraged",children:"How MCP is typically leveraged"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"UI / Application layer packages context: The app collects user settings, recent messages, and relevant files and composes an MCP package."}),"\n",(0,i.jsx)(n.li,{children:"Orchestrator or agent merges contexts: If multiple sources provide context (user + system + tool), a deterministic merge policy creates the final context bundle."}),"\n",(0,i.jsx)(n.li,{children:"Adapter or runtime transforms for the model: The MCP package is transformed into the model\u2019s expected prompt/input format (e.g., flattened prompt, instruction tokens, or API-specific fields)."}),"\n",(0,i.jsx)(n.li,{children:"Model runs and returns outputs: Outputs are returned alongside references to the context used (context id/version), enabling replay and audit."}),"\n",(0,i.jsx)(n.li,{children:"Logger or storage saves context snapshot: For traceability, the exact MCP bundle used for a request is stored with the output."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"integration-patterns",children:"Integration patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prompt-time mapping: Convert MCP components into parts of a single prompt template (system, user, assistant blocks)."}),"\n",(0,i.jsx)(n.li,{children:"Streaming enrichments: Attach small MCP markers that allow the runtime to fetch larger documents on-demand."}),"\n",(0,i.jsx)(n.li,{children:"Tool-aware invocation: Include tool descriptions in MCP so agents can plan and call tools safely."}),"\n",(0,i.jsx)(n.li,{children:"Embedding pointers: MCP can reference pre-computed embeddings instead of raw documents for semantic retrieval."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"data-shape-example",children:"Data shape (example)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "context_id": "ctx_2025_08_15_001",\n  "version": "1.0",\n  "identity": { "user_id": "user_123", "roles": ["editor"] },\n  "instructions": { "system": "You are a helpful assistant.", "style": "concise" },\n  "documents": [ { "id": "doc_1", "type": "summary", "pointer": "s3://..." } ],\n  "tools": [ { "name": "search", "schema": { "q": "string" } } ],\n  "constraints": { "max_cost": 0.05, "safety": "strict" }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This small, typed package can be validated before being passed to any model adapter."}),"\n",(0,i.jsx)(n.h3,{id:"edge-cases--pitfalls",children:"Edge cases & pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Overly large context bundles increase latency and cost. Prefer pointers/embeddings for big reference sets."}),"\n",(0,i.jsx)(n.li,{children:"Ambiguous merge rules: define explicit precedence (system > app > user) and document it."}),"\n",(0,i.jsx)(n.li,{children:"Privacy: context may contain PII; encrypt or redact fields where required and log access."}),"\n",(0,i.jsx)(n.li,{children:"Drift: keep schema versions and migrations so old context packages remain interpretable."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"security--governance",children:"Security & governance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Validate and sanitize all context fields before use."}),"\n",(0,i.jsxs)(n.li,{children:["Enforce policy constraints from a central policy engine included as part of MCP (e.g., a ",(0,i.jsx)(n.code,{children:"constraints.policy"})," block)."]}),"\n",(0,i.jsx)(n.li,{children:"Record cryptographic hashes of sensitive context packages for tamper-evident audit trails."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-uses-in-ai-systems",children:"Example uses in AI systems"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Virtual assistants: supply long-term user preferences and short-term session history as MCP to improve continuity."}),"\n",(0,i.jsx)(n.li,{children:"Enterprise apps: attach compliance rules and document pointers for model responses in regulated domains."}),"\n",(0,i.jsx)(n.li,{children:"Multi-agent systems: agents exchange MCP bundles to collaborate on tasks while keeping a shared, auditable state."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"quick-implementation-checklist",children:"Quick implementation checklist"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Define a minimal MCP schema for your product (identity, instructions, docs, constraints)."}),"\n",(0,i.jsx)(n.li,{children:"Implement a serializer + validator for the schema."}),"\n",(0,i.jsx)(n.li,{children:"Add deterministic merge rules and document precedence."}),"\n",(0,i.jsx)(n.li,{children:"Log context_id and version with model calls for traceability."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"further-reading--resources",children:"Further reading & resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Design patterns: context as a first-class object in agent systems"}),"\n",(0,i.jsx)(n.li,{children:"Schemas: JSON Schema / OpenAPI for typing MCP components"}),"\n",(0,i.jsx)(n.li,{children:"Storage: efficient pointers (S3, DB ids) versus embedding storage"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"exercises-for-learners",children:"Exercises (for learners)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Draft a minimal MCP JSON for a simple task: email summarization."}),"\n",(0,i.jsx)(n.li,{children:"Implement a merge function that combines system, app, and user contexts with clear precedence."}),"\n",(0,i.jsx)(n.li,{children:"Convert an MCP package into a single prompt template for a chosen model API."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"This introduction is intentionally concrete and practical \u2014 the goal is to make context explicit, versioned, and reusable so models behave reliably in production systems."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);